OverviewHave you ever been to a music festival? At one point in my life, they were all I lived for. Overthe last few years, I’ve slowed down a lot but the passion to go is still there. FestiShare is aplace where you can share that experience. Maybe you’re contemplating on whether to go tothis festival and don’t quite know anyone who has attended. FestiShare is here to solve thatproblem. Anyone can visit the site and check out any of the festivals and their reviews that havebeen added by other users. To add festivals and leave reviews, you must register for anaccount and be logged in. No need to use actual emails or passwords. As long as the email is inemail format (email@email.com) it will validate. Each festival is geo located with a convenientmap for visual preference. The idea for FestiShare came to me after I convinced some friends of mine to buy tickets to myfavorite music festival which I attend annually. The festival is called Lost Lands and is located inOhio. I can probably go on for hours describing just how amazing of an experience this place isbut that tends to get old after a while. After spending some time attempting to put my pastexperiences into words, the idea for FestiShare came to me. What if there was a site you canconveniently visit and get all the information on a festival you need? A place where people cannot only share their experience but give it a familiar star rating along with submitting some oftheir favorite pictures from their experience. Not only is this an outlet for people to share theirpersonal experience, but others who have yet to experience that particular festival, can readothers’ experiences and get an idea of whether this festival is for them. Enter, Festishare “Aplace to share your festival experiences.”What I learnedDeveloping FestiShare was the ultimate learning experience for me. FestiShare is essentially aNode.js app and starting this project was my first brush with Node. Being a JavaScript runtimeand with my foundations being in JavaScript, it did not take me long to get the hang of thesyntax and design patterns. I consider myself a front-end focused engineer so although it usedthe same code syntax, it was a whole different paradigm and definitely took some adjustingtoo. One of the first and biggest things I learned while developing FestiShare was RESTfulrouting. Having a set standard of creating efficient, reusable routes sets an easy path tocreating future projects. RESTful routes are the main components of any CRUD application,which brings me to another useful skill I learned building this project. C.R.U.D (Create, Read,Update, Delete) is the basis of most full-stack applications. The ability to create, read, update,and delete data are core functions of the client side of an application. They give the user theability to manipulate the data on the application. The majority of CRUD applications, if not all,not only need a back and frontend to function, but also a Database; which leads me to the nextbig concept I learned: Databases. For this project, I decided to go with a Non relational databas(NoSql). My Database of choice was MongoDB. Mongo is a document-oriented Database whichstores data in JSON format (JavaScript Object Notation) instead of related tables like arelational database. My reasoning behind that choice was because my foundations are inJavaScript and since Mongo stores data in JSON format, I was already used to the syntax withlessened the learning curve giving me the ability to focus on the project structure. Another bigtopic I learned while building this project was user authentication. To handle userauthentication, I used a middleware called Passport.js. Passport is authentication middlewarefor Node. js. Extremely flexible and modular, Passport can be unobtrusively dropped in to anyExpress-based web application. To handle validation of user auth, I used Joi validation to workhand in hand with Passport to validate the authentication schema used with Passport. Joi is anobject schema description language and validator for JavaScript objects. With Joi, we createblueprints or schemas for JavaScript objects to ensure validation of key information. DevelopingFestiShare was also my first run in with any type of templating language. We use templatinglanguages to render scripts in dynamic websites. Templating engines allow developers to takedata and insert it into a structured format and are ubiquitous across software. One of myfavorite features on FestiShare is the Geo located map I have displayed on each page showingthe location of the festival. I used Mapbox to display the maps. Mapbox makes it easy to insertJSON data into the template they provide you which allows you to set any location and render iton a map for the user.StrugglesEssentially, this whole project was one huge struggle. I am a front-end focused engineer, andthis was a backend heavy application, so the learning curve was pretty steep. One thing aboutme, I am ALWAYS up for a challenge. This project was the culmination of a full year of priorlearning. My first struggle was getting the RESTful routes pattern memorized. Once I had thatdown, coding the routes for each page on the project started to come pretty quickly. EJS, thetemplating engine, was another struggle for me. After spending a few days with the EJS sytax, itstarted to make a little more sense to me. In the future I may choose a different language. Oneof the bigger struggles I ran into was having the ability to store photos that users would uploadonto the site. The problem with image uploading is that you can’t control the sizes of theimages the end user will choose to upload. Luckily for me, there’s a technology known asCloudinary that made uploading images a breeze. Cloudinary is an end-to-end image- andvideo-management solution for websites and mobile apps, covering everything from image andvideo uploads, storage, manipulations, optimizations to delivery. Cloudinary uses acompression algorithm so you can easily upload images and videos to the cloud and automatesmart manipulations of those media without installing any other software. Cloudinary thenseamlessly delivers your media through a fast content delivery network (CDN), optimized withthe industry’s best practices. Last but not least, my biggest struggle was learning how tocorrectly implement user Authorization. Fortunately, FestiShare is a hobby application and nowa professional production app with millions of users. The authentication security I currentlyhave set up will keep any regular, non-tech person at bay from being able to hack it but foranyone with any real backend knowledge, it can more than likely be hacked. Luckily I hadtechnologies like Passport and Joi to help me along the way and give me the ability to set up atleast a basic wall of security. All in all, every struggle I had to deal with ultimately turned into avaluable learning experience